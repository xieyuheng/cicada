- [eopl.lang_infered]
* eopl
- [eopl.lang_module] this is import for my interpreter framework
- [eopl.lang_class]
* formal concept analysis
* formal specification
* inductive type
- [to be sure] how can lambda cube encode type constructors and data constructors ?
- [to be sure] in "a general formulation of simultaneous inductive-recursive definitions in type theory" of dybjer
  - simultaneous means define a type constructor and its data constructors at the same time
  - eliminators (elimination rules) are not generated
* jojo
- we can do a practical jojo with ml-like type system
- [adventure.counted] annotation for arg_count and ret_count
- [adventure.counted] infer arg_count and ret_count
- [adventure.counted] eq by eval
- [adventure.counted] encode permutation group
- [adventure.simple] type alias `type <name> = ...`
- [adventure.simple] representing data types
- [adventure.simple] paper
  learn about how to write good story from knuth
* de_bruijn
- [de_bruijn] type alias `let type <name> = ...`
- [de_bruijn] representing data types
- [de_bruijn_logical] view type atom as logic variable and use unification
  - this should be a different language from [de_bruijn]
- [de_bruijn] synth
- theory about equality between lambda terms
  - reflexivity
    symmetry
    transitivity
    congruence
    beta_reduction
    eta_reduction
* miniml
- learn about type infer
* the little mler
- as test for some of the languages
* lambda
- church's encoding and the unsolvable problem paper
- can norm-by-eval handle call-by-name terms ?
- what are examples of call-by-value bad terms ?
* curry
- [curry] view type atom as logic variable and use unification
  - type system of curry style need type variable
    there is no version of curry style without type variable
* tartlet
- lazy eval will be not needed in language with termination check
- [note] why we *do need* "type directed norm-by-eval" here ?
- extend tartlet to pie
- use `TODO` as un-implemented
- block of let and return
- be sure about the use of TheVal and friends
- [test proof] eta conversion: f == (x) => f(x)
- extend tartlet to define new types
  - keep it subrecursive, but be generic about data and ind, rec and iter
- add cumulative (maybe non-cumulative) levels of types -- type_t(n)
* the little typer
- as test for dependently typed language
* pure type system
- in addition to a file to eval, also a file of config of sorts, axioms and rules
- logic framework is a special case of pure type system ?
  plus a single subtyping-like rule
  A: Set --> A: Type
  - where `Set` is inductively generate datatype
* sysf
* minitt
- [note] why we *do not need* "type directed norm-by-eval" here ?
- [question] I think the use of NormEnv will break `equals`
- add `eqv_t` `same` `replace`
- add constrains to type constructors
- why not jsut use letrec for every definition ? -- learn from EOPL
- add cumulative (maybe non-cumulative) levels of types -- type_t(n)
- be sure about the use of Pattern
  - write some notes
  - Norm do not use Pattern
  - note about how letrec is handled at lookup-time
* module system
- module as value with opaque module_t is not enough -- learn from EOPL
* partech
- [partech] rewrite in c
- [partech] ErrMsg and Span
- [partech] better report with ErrMsg in context
* compile with cps
* sat
- sat solver vis (how it is vis-ed?)
* complexity
- cook's machine for trans algo to lin-algo
* lambda machine
- new machine for call-by-name or call-by-need lambda
* term rewriting
* dsl
- generative art
- formal concept analysis
- cell complex
- four dancing circles
