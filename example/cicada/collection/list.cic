import * from "../basic/bool.cic"
import * from "../basic/nat.cic"

datatype list_t(A: type) {
  case null: list_t(A)
  case cons(head: A, tail: list_t(A)): list_t(A)
}

fn list_length(x: list_t): nat_t = {
  x choice {
    case null => zero
    case cons => succ(list_length(x.tail))
  }
}

fn list_append[A: type](x: list_t(A), y: list_t(A)): list_t(A) = {
  x choice {
    case null => y
    case cons => cons(x.head, list_append(x.tail, y))
  }
}

fn list_map[A: type, B: type](f: (A) -> B, x: list_t(A)): list_t(B) = {
  x choice {
    case null => null
    case cons => cons(f(x.head), list_map(f, x.tail))
  }
}

let three_zeros: list_t(nat_t) = {
  cons(zero, cons(zero, cons(zero, null)))
}

let three_ones: list_t(nat_t) = {
  cons(one, cons(one, cons(one, null)))
}
