// bool_t = (A) -> (A) -> A

let true: (A) -> (A) -> A =
  (x: A) => (y: A) => x

let false: (A) -> (A) -> A =
  (x: A) => (y: A) => y

let not: ((A) -> (A) -> A) -> (A) -> (A) -> A = {
  (a: (A) -> (A) -> A) => (x: A) => (y: A) => a(y, x)
}

@show true
@show false
@show not

@walk_through not(true)
@walk_through not(false)

@assert_eq not(true) false
@assert_eq not(false) true

@walk_through not(not(true))
@walk_through not(not(false))

@assert_eq not(not(true)) true
@assert_eq not(not(false)) false

@assert_eq not(not(not(true))) false
@assert_eq not(not(not(false))) true
