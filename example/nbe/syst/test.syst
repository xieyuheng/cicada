@show zero
@show succ(succ(succ(zero)))

let three: nat_t = succ(succ(succ(zero)))

let add: (nat_t, nat_t) -> nat_t = {
  (x, y) =>
    nat_rec(nat_t, x, y,
      (prev, almost) => succ(almost))
}

@show add(the(nat_t, three))
@show add(three, three)

let true: (nat_t) -> (nat_t) -> nat_t =
  (x) => (y) => x

let false: (nat_t) -> (nat_t) -> nat_t =
  (x) => (y) => y

let not: ((nat_t) -> (nat_t) -> nat_t) -> (nat_t) -> (nat_t) -> nat_t =
  (a) => (x) => (y) => a(y, x)

@show true
@show false

@show not(true)
@show not(not(true))
