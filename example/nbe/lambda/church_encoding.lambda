// nat

let zero = (f, x) => x
let succ = (prev, f, x) => f(prev(f, x))
let add = (j, k, f, x) => j(f, k(f, x))

let one = succ(zero)
let two = succ(one)

@show add(one, one)

let f = {
  let x = two
  let y = two
  return add(x, y)
}

@show f

// bool

let true = (x) => (y) => x
let false = (x) => (y) => y
let not = (a) => (x) => (y) => a(y, x)

@show true
@show false

@show not(true)
@show not(not(true))
