vec_t : { (- type) (- nat_t) type }
vec_t = {
  [A : type]
  [n : nat_t]
  datatype {
    vec_null : { datacons { n == zero } }
    vec_cons : {
      (let prev : nat_t)
      (- A) (- prev A vec_t)
      datacons { n == prev succ }
    }
  }
}

vec_append : {
  [A : type]
  [m : nat_t]
  [n : nat_t]
  (- m A vec_t)
  (- n A vec_t)
  m n nat_add A vec_t
}
vec_append = {
  (dep A : type)
  (dep m : nat_t)
  (dep n : nat_t)
  [x : m A vec_t]
  [y : n A vec_t]
  x match {
    case vec_null { y }
    case vec_cons {
      [prev : nat_t]
      [head : A] [tail : prev A vec_t]
      y tail n prev A vec_append
      head prev vec_cons
    }
  }
}
